# Index.cshtml
@page
@model ColorRecognizerWebApp.Pages.IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Color Recognizer</h1>
    <p>Select an image to analyze colors:</p>
    <form method="post" enctype="multipart/form-data">
        <input type="file" name="uploadedImage" />
        <br /><br />
        <button type="submit" class="btn btn-primary">Analyze Image</button>
    </form>

    @if (Model.ImagePath != null)
    {
        <hr />
        <h3>Uploaded Image:</h3>
        <div style="position: relative; display: inline-block;">
            <img id="uploadedImage" src="@Url.Content(Model.ImagePath)" alt="Uploaded Image" style="max-width: 80%; height: auto;"/>
            <div id="colorBox" style="width: 100px; height: 100px; position: absolute; top: 0; left: 0; border: 2px solid black;"></div>
        </div>
        <br /><br />
        <button id="pickColorBtn" class="btn btn-secondary">Pick Color</button>
        <br /><br />
        <h3>Selected Color:</h3>
        <div id="selectedColorBox" style="width: 100px; height: 100px; border: 2px solid black;"></div>
        <p id="colorCode">Hex: @Model.HexColor</p>
        <p id="rgbCode">RGB: @Model.RGBColor</p>
    }
</div>

@section Scripts {
    <script>
        document.getElementById('pickColorBtn').addEventListener('click', function () {
            const img = document.getElementById('uploadedImage');
            const colorBox = document.getElementById('colorBox');
            img.addEventListener('click', function (event) {
                const rect = img.getBoundingClientRect();
                const x = event.clientX - rect.left;
                const y = event.clientY - rect.top;

                const canvas = document.createElement('canvas');
                canvas.width = img.width;
                canvas.height = img.height;
                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0, img.width, img.height);

                const pixel = ctx.getImageData(x, y, 1, 1).data;
                const hexColor = rgbToHex(pixel[0], pixel[1], pixel[2]);
                const rgbColor = `rgb(${pixel[0]}, ${pixel[1]}, ${pixel[2]})`;

                document.getElementById('selectedColorBox').style.backgroundColor = hexColor;
                document.getElementById('colorCode').textContent = `Hex: ${hexColor}`;
                document.getElementById('rgbCode').textContent = `RGB: ${rgbColor}`;

                colorBox.style.backgroundColor = hexColor;
                colorBox.style.left = `${x}px`;
                colorBox.style.top = `${y}px`;
            });
        });

        function rgbToHex(r, g, b) {
            return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase()}`;
        }
    </script>
}
